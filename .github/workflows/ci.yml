name: CI

on:
  workflow_call:
    secrets:
      pat-token:
        required: true
  workflow_dispatch:

jobs:
  build-deps:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"

      - name: Setup Dependencies
        uses: ./.github/actions/composer-dependency-setup
  enforce-copyright:
    runs-on: ubuntu-22.04

    timeout-minutes: 10

    needs: [build-deps]

    steps:
      - name: Checkout code | Internal
        if: ${{ github.event_name == 'merge_group' || github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]' }}
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.pat-token }}

      - name: Checkout code | External
        if: ${{ github.event_name != 'merge_group' && github.event.pull_request.head.repo.full_name != github.repository || github.actor == 'dependabot[bot]' }}
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1

      - name: Run Ruby Script
        run: ruby ./copyright.rb

      - name: Commit changes
        if: ${{ github.event_name != 'merge_group' && github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]' }}
        # SHA of release v5.0.1
        uses: stefanzweifel/git-auto-commit-action@8621497c8c39c72f3e2a999a26b4ca1b5058a842
        with:
          commit_message: >
            chore: fix enforcement of copyright on all files

      - name: Check for changes
        if: ${{ github.event_name == 'merge_group' || github.event.pull_request.head.repo.full_name != github.repository || github.actor == 'dependabot[bot]' }}
        # SHA of release v20.0.1
        uses: tj-actions/verify-changed-files@6ed7632824d235029086612d4330d659005af687
        with:
          fail-if-changed: "true"

  fix-code-style:
    runs-on: ubuntu-22.04

    timeout-minutes: 10

    needs: [build-deps, enforce-copyright]

    steps:
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"

      - name: Checkout code | Internal
        if: ${{ github.event_name == 'merge_group' || github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]' }}
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.pat-token }}

      - name: Checkout code | External
        if: ${{ github.event_name != 'merge_group' && github.event.pull_request.head.repo.full_name != github.repository || github.actor == 'dependabot[bot]' }}
        uses: actions/checkout@v4

      - name: Setup Dependencies
        uses: ./.github/actions/composer-dependency-setup

      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - run: npm install

      - name: Cache PHP CS Fixer
        uses: actions/cache@v4
        with:
          path: .php-cs-fixer.cache
          key: ${{ runner.OS }}-${{ github.repository }}-phpcsfixer-${{ github.run_id }}
          restore-keys: |
            ${{ runner.OS }}-${{ github.repository }}-phpcsfixer-

      - name: Run Formatters
        run: composer format

      - name: Commit changes
        if: ${{ github.event_name != 'merge_group' && github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]' }}
        # SHA of release v5.0.1
        uses: stefanzweifel/git-auto-commit-action@8621497c8c39c72f3e2a999a26b4ca1b5058a842
        with:
          commit_message: >
            chore: fix code style

      - name: Check for changes
        if: ${{ github.event_name == 'merge_group' || github.event.pull_request.head.repo.full_name != github.repository || github.actor == 'dependabot[bot]' }}
        # SHA of release v20.0.1
        uses: tj-actions/verify-changed-files@6ed7632824d235029086612d4330d659005af687
        with:
          fail-if-changed: "true"

  test:
    runs-on: ubuntu-22.04

    env:
      DB_PORT: 5432
      DB_HOST: 127.0.0.1
      DB_USERNAME: root
      DB_PASSWORD: root
      DB_DATABASE: testing_landlord
      REDIS_HOST: 127.0.0.1

    timeout-minutes: 15

    needs: [build-deps, enforce-copyright, fix-code-style]

    services:
      postgres:
        # Docker Hub image
        image: postgres:15
        ports:
          - 5432:5432
        # Provide the password for postgres
        env:
          PGPASSWORD: ${{ env.DB_PASSWORD }}
          POSTGRES_DB: ${{ env.DB_DATABASE }}
          POSTGRES_USER: ${{ env.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Create tenant database
        run: psql -h 127.0.0.1 -d testing_landlord -U root -c 'CREATE DATABASE testing_tenant;'
        env:
          PGPASSWORD: root

      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: gd, gmp, redis

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Setup Dependencies
        uses: ./.github/actions/composer-dependency-setup

      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - run: npm install

      - name: Build Assets
        run: npm run build

      - name: Generate key
        run: php artisan key:generate

      - name: Clear Config
        run: php artisan optimize:clear

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Check route integrity
        run: php artisan route:list

      - name: Execute tests (Unit and Feature tests) via PHPUnit
        run: php artisan test --configuration phpunit-ci.xml --parallel

  lint:
    runs-on: ubuntu-22.04

    env:
      DB_PORT: 5432
      DB_HOST: 127.0.0.1
      DB_USERNAME: root
      DB_PASSWORD: root
      DB_DATABASE: testing_landlord
      PENNANT_STORE: array

    timeout-minutes: 15

    needs: [build-deps, enforce-copyright, fix-code-style]

    services:
      postgres:
        # Docker Hub image
        image: postgres:15
        ports:
          - 5432:5432
        # Provide the password for postgres
        env:
          PGPASSWORD: ${{ env.DB_PASSWORD }}
          POSTGRES_DB: ${{ env.DB_DATABASE }}
          POSTGRES_USER: ${{ env.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Create tenant database
        run: psql -h 127.0.0.1 -d testing_landlord -U root -c 'CREATE DATABASE testing_tenant;'
        env:
          PGPASSWORD: root

      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: gd, gmp, redis

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Setup Dependencies
        uses: ./.github/actions/composer-dependency-setup

      - name: Linting
        run: composer lint
