<?php

/*
<COPYRIGHT>

    Copyright © 2016-2025, Canyon GBS LLC. All rights reserved.

    Advising App™ is licensed under the Elastic License 2.0. For more details,
    see https://github.com/canyongbs/advisingapp/blob/main/LICENSE.

    Notice:

    - You may not provide the software to third parties as a hosted or managed
      service, where the service provides users with access to any substantial set of
      the features or functionality of the software.
    - You may not move, change, disable, or circumvent the license key functionality
      in the software, and you may not remove or obscure any functionality in the
      software that is protected by the license key.
    - You may not alter, remove, or obscure any licensing, copyright, or other notices
      of the licensor in the software. Any use of the licensor’s trademarks is subject
      to applicable law.
    - Canyon GBS LLC respects the intellectual property rights of others and expects the
      same in return. Canyon GBS™ and Advising App™ are registered trademarks of
      Canyon GBS LLC, and we are committed to enforcing and protecting our trademarks
      vigorously.
    - The software solution, including services, infrastructure, and code, is offered as a
      Software as a Service (SaaS) by Canyon GBS LLC.
    - Use of this software implies agreement to the license terms and conditions as stated
      in the Elastic License 2.0.

    For more information or inquiries please visit our website at
    https://www.canyongbs.com or contact us via email at legal@canyongbs.com.

</COPYRIGHT>
*/ declare(strict_types=1);

# File generated by "php artisan lighthouse:ide-helper".
# Do not edit this file directly.
# This file should be ignored by git as it can be autogenerated.

namespace Nuwave\Lighthouse\Subscriptions\Contracts {
    interface Broadcaster {}
}

namespace Illuminate\Testing {
    use Mockery\MockInterface;
    use Nuwave\Lighthouse\Subscriptions\Contracts\Broadcaster;
    use PHPUnit\Framework\TestCase;

    class TestResponse
    {
        /**
         * Assert the response contains an error with a matching message.
         *
         * @param  \Throwable  $error the expected error
         *
         * @return $this
         */
        public function assertGraphQLError(\Throwable $error): self
        {
            return $this;
        }

        /**
         * Assert the response contains an error with the given message.
         *
         * @param  string  $message the expected error message
         *
         * @return $this
         */
        public function assertGraphQLErrorMessage(string $message): self
        {
            return $this;
        }

        /**
         * Assert the response contains an error with the given debug message.
         *
         * Requires the config `lighthouse.debug` to include the option \GraphQL\Error\DebugFlag::INCLUDE_DEBUG_MESSAGE.
         *
         * @param  string  $message the expected debug message
         *
         * @return $this
         */
        public function assertGraphQLDebugMessage(string $message): self
        {
            return $this;
        }

        /**
         * Assert the response contains no errors.
         *
         * @return $this
         */
        public function assertGraphQLErrorFree(): self
        {
            return $this;
        }

        /**
         * Assert the returned result contains exactly the given validation keys.
         *
         * @param  array<string>  $keys the validation keys the result should have
         *
         * @return $this
         */
        public function assertGraphQLValidationKeys(array $keys): self
        {
            return $this;
        }

        /**
         * Assert a given validation error is present in the response.
         *
         * @param  string  $key the validation key that should be present
         * @param  string  $message the expected validation message
         *
         * @return $this
         */
        public function assertGraphQLValidationError(string $key, string $message): self
        {
            return $this;
        }

        /**
         * Assert no validation errors are present in the response.
         *
         * @return $this
         */
        public function assertGraphQLValidationPasses(): self
        {
            return $this;
        }

        /**
         * Assert current user is authorized to join a subscription.
         *
         * @param  \PHPUnit\Framework\TestCase  $testClassInstance usually $this when calling this from a test class
         *
         * @return $this
         */
        public function assertGraphQLSubscriptionAuthorized(TestCase $testClassInstance): self
        {
            return $this;
        }

        /**
         * Assert current user is NOT authorized to join a subscription.
         *
         * @param  \PHPUnit\Framework\TestCase  $testClassInstance usually $this when calling this from a test class
         *
         * @return $this
         */
        public function assertGraphQLSubscriptionNotAuthorized(TestCase $testClassInstance): self
        {
            return $this;
        }

        /**
         * For cases where you need more control over your broadcast assertions.
         *
         * @return \Nuwave\Lighthouse\Subscriptions\Contracts\Broadcaster&\Mockery\MockInterface
         *
         * @see \Nuwave\Lighthouse\Testing\TestResponseMixin::assertGraphQLNotBroadcasted
         * @see \Nuwave\Lighthouse\Testing\TestResponseMixin::assertGraphQLBroadcasted
         */
        public function graphQLSubscriptionMock(): Broadcaster
        {
            $mock = \Mockery::mock(Broadcaster::class);
            assert($mock instanceof Broadcaster && $mock instanceof MockInterface);

            return $mock;
        }

        /** Get the channel name from a subscription query. */
        public function graphQLSubscriptionChannelName(): string
        {
            return '';
        }

        /**
         * Assert the subscription received the given broadcasts.
         *
         * @param  array<int, array<string, mixed>>  $data the broadcast pattern that you are expecting
         *
         * @return $this
         */
        public function assertGraphQLBroadcasted(array $data): self
        {
            return $this;
        }

        /**
         * Assert the subscription received no broadcast.
         *
         * @return $this
         */
        public function assertGraphQLNotBroadcasted(): self
        {
            return $this;
        }
    }
}
