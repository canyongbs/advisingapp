type Engagement @model(class: "AdvisingApp\\Engagement\\Models\\Engagement") {
    id: UUID!

    subject: String

    body: String @method(name: "getBody")

    scheduled: Boolean!

    deliver_at: DateTime!

    created_at: DateTime

    updated_at: DateTime

    deleted_at: DateTime

    recipient: Educatable! @morphTo

    created_by: User @belongsTo(relation: "createdBy")

    deliverable: EngagementDeliverable @hasOne

    audits: [Audit!] @hasMany

    audits_count: Int @count(relation: "audits")
}

input EngagementRecipientsQuery {
    student: StudentsQuery
    prospect: ProspectsQuery
}

input EngagementsQuery {
    id: UUID

    subject: String

    body: JSON

    scheduled: Boolean

    deliver_at: DateTime

    created_at: DateTime

    updated_at: DateTime

    deleted_at: DateTime

    recipient: EngagementRecipientsQuery @morphToRelation

    created_by: UsersQuery

    audits: AuditsQuery
}

type EngagementQueries {
    find(
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:engagements"])
    ): Engagement @find @canResolved(ability: "view")

    list(
        where: EngagementsQuery @searchBy
        order: EngagementsQuery @sortBy
    ): [Engagement!]! @paginate @canModel(ability: "viewAny")
}

extend type Query {
    engagement: EngagementQueries! @namespaced
}

input CreateEngagementSMSInput {
    body: String! @rules(apply: ["required", "string", "max:320"])

    scheduled: Boolean

    deliver_at: DateTime @rules(apply: ["required_if:scheduled,true"])

    recipient_id: EducatableId!
        @rules(
            apply: [
                "required"
                "AdvisingApp\\Engagement\\GraphQL\\Rules\\RecipientIdExists"
            ]
        )

    recipient_type: EducatableType!
        @rules(apply: ["required", "in:student,prospect"])
}

input UpdateEngagementSMSInput {
    body: String @rules(apply: ["required", "string", "max:320"])

    scheduled: Boolean

    deliver_at: DateTime @rules(apply: ["required_if:scheduled,true"])
}

type EngagementMutations {
    sendSms(input: CreateEngagementSMSInput! @spread): Engagement!
        @canResolved(ability: "create")
        @field(resolver: "AdvisingApp\\Engagement\\GraphQL\\Mutations\\SendSMS")

    updateSms(
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:engagements"])
        input: UpdateEngagementSMSInput! @spread
    ): Engagement
        @canFind(ability: "update", find: "id")
        @field(
            resolver: "AdvisingApp\\Engagement\\GraphQL\\Mutations\\UpdateSMS"
        )

    delete(
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:engagements"])
    ): Engagement
        @canFind(ability: "delete", find: "id")
        @field(
            resolver: "AdvisingApp\\Engagement\\GraphQL\\Mutations\\DeleteEngagement"
        )
}

extend type Mutation {
    engagement: EngagementMutations! @namespaced
}
