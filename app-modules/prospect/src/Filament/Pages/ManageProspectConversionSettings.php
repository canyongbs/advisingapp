<?php

namespace AdvisingApp\Prospect\Filament\Pages;

use Cknow\Money\Money;
use Filament\Forms\Form;
use Filament\Pages\SettingsPage;
use App\Features\ProspectConversion;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\TextInput;
use App\Filament\Forms\Components\Heading;
use App\Filament\Forms\Components\Paragraph;
use App\Settings\ProspectConversionSettings;
use App\Filament\Clusters\ConstituentManagement;

class ManageProspectConversionSettings extends SettingsPage
{
    protected static ?string $navigationIcon = 'heroicon-o-currency-dollar';

    protected static string $settings = ProspectConversionSettings::class;

    public string $currency = 'USD';

    protected static ?string $title = 'Conversion';

    protected static ?int $navigationSort = 3;

    protected static ?string $navigationGroup = 'Prospect Management';

    protected static ?string $cluster = ConstituentManagement::class;

    public static function canAccess(): bool
    {
        /** @var User $user */
        $user = auth()->user();

        return ProspectConversion::active() && parent::canAccess() && $user->can('prospect_conversion.manage');
    }

    public function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make()
                    ->columns()
                    ->schema([
                        Heading::make()
                            ->content('Conversion Value'),
                        Paragraph::make()
                            ->content('Setting a conversion value will enable tracking of potential institutional revenue driven by engagement efforts including individual, bulk, and campaign outreach.'),
                        Paragraph::make()
                            ->content('Please enter the estimated average revenue generated by a student over their lifetime at your institution:'),
                        TextInput::make('estimated_average_revenue')
                            ->label('Estimated Average Revenue')
                            ->prefix('$')
                            ->numeric()
                            ->step(0.01)
                            ->minValue(0)
                            ->rule('decimal:0,2')
                            ->required(),
                    ]),
            ]);
    }

    protected function mutateFormDataBeforeSave(array $data): array
    {
        $data['estimated_average_revenue'] = Money::parseByDecimal($data['estimated_average_revenue'], $this->currency);

        return $data;
    }

    protected function mutateFormDataBeforeFill(array $data): array
    {
        $settings = app(static::getSettings());

        $data['estimated_average_revenue'] = $settings->estimated_average_revenue->formatByDecimal();

        return $data;
    }
}
