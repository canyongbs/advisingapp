<?php

namespace AdvisingApp\Prospect\Filament\Pages;

use Throwable;
use Cknow\Money\Money;
use Filament\Forms\Form;
use Filament\Pages\SettingsPage;
use App\Features\ProspectConversion;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\TextInput;
use Filament\Notifications\Notification;

use function Filament\Support\is_app_url;

use App\Filament\Forms\Components\Heading;
use Filament\Support\Facades\FilamentView;
use App\Filament\Forms\Components\Paragraph;
use App\Settings\ProspectConversionSettings;
use App\Filament\Clusters\ConstituentManagement;

class ManageProspectConversionSettings extends SettingsPage
{
    protected static ?string $navigationIcon = 'heroicon-o-currency-dollar';

    protected static string $settings = ProspectConversionSettings::class;

    public $currency = 'USD';

    protected static ?string $title = 'Conversion';

    protected static ?int $navigationSort = 3;

    protected static ?string $navigationGroup = 'Prospect Management';

    protected static ?string $cluster = ConstituentManagement::class;

    public static function canAccess(array $parameters = []): bool
    {
        return ProspectConversion::active() && parent::canAccess($parameters);
    }

    public function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make()
                    ->columns()
                    ->schema([
                        Heading::make()
                            ->content('Conversion Value'),
                        Paragraph::make()
                            ->content('Setting a conversion value will enable tracking of potential institutional revenue driven by engagement efforts including individual, bulk, and campaign outreach.'),
                        Paragraph::make()
                            ->content('Please enter the estimated average revenue generated by a student over their lifetime at your institution:'),
                        TextInput::make('estimated_average_revenue')
                            ->label('Estimated Average Revenue')
                            ->prefix('$')
                            ->numeric()
                            ->step(0.01)
                            ->minValue(0)
                            ->rule('decimal:0,2')
                            ->required(),
                    ]),
            ]);
    }

    public function save(): void
    {
        try {
            $this->callHook('beforeValidate');
            $data = $this->form->getState();

            $this->callHook('afterValidate');
            $settings = app(static::getSettings());
            $this->callHook('beforeSave');
            $settings->estimated_average_revenue = Money::parseByDecimal($data['estimated_average_revenue'], $this->currency);
            $settings->save();

            $this->callHook('afterSave');

            Notification::make()
                ->title('Conversion value saved successfully!')
                ->success()
                ->send();

            if ($redirectUrl = $this->getRedirectUrl()) {
                $this->redirect($redirectUrl, navigate: FilamentView::hasSpaMode() && is_app_url($redirectUrl));
            }
        } catch (Throwable $exception) {
            report($exception);

            Notification::make()
                ->title('Something went wrong, if this continues please contact support.')
                ->danger()
                ->send();
        }
    }

    protected function mutateFormDataBeforeFill(array $data): array
    {
        $settings = app(static::getSettings());

        $data['estimated_average_revenue'] = $settings->estimated_average_revenue->formatByDecimal();

        return $data;
    }
}
