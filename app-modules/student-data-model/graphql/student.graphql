type Student @model(class: "AdvisingApp\\StudentDataModel\\Models\\Student") {
    sisid: ID!

    otherid: String

    first: String

    last: String

    full_name: String

    preferred: String

    display_name: String

    email: Email

    email_2: Email

    mobile: String

    sms_opt_out: Boolean!

    email_bounce: Boolean!

    phone: String

    address: String

    address2: String

    address3: String

    city: String

    state: String

    postal: String

    birthdate: Date

    hsgrad: Year

    dual: Boolean!

    ferpa: Boolean!

    dfw: Date

    sap: Boolean!

    holds: String

    firstgen: Boolean!

    ethnicity: String

    lastlmslogin: DateTime

    f_e_term: String

    mr_e_term: String

    enrollments: [Enrollment!] @hasMany

    enrollments_count: Int @count(relation: "enrollments")

    programs: [Program!] @hasMany

    programs_count: Int @count(relation: "programs")

    audits: [Audit!] @hasMany

    audits_count: Int @count(relation: "audits")
}

input StudentsQuery {
    sisid: ID

    otherid: String

    first: String

    last: String

    full_name: String

    preferred: String

    email: Email

    email_2: Email

    mobile: String

    sms_opt_out: Boolean

    email_bounce: Boolean

    phone: String

    address: String

    address2: String

    address3: String

    city: String

    state: String

    postal: String

    birthdate: Date

    hsgrad: Year

    dual: Boolean

    ferpa: Boolean

    dfw: Date

    sap: Boolean

    holds: String

    firstgen: Boolean

    ethnicity: String

    lastlmslogin: DateTime

    f_e_term: String

    mr_e_term: String

    enrollments: EnrollmentsQuery

    programs: ProgramsQuery

    audits: AuditsQuery
}

type StudentQueries {
    "Get a specific student by ID."
    find(
        sisid: ID!
            @whereKey
            @rules(apply: ["required", "string", "exists:students"])
    ): Student @find @canResolved(ability: "view")

    "List multiple students."
    list(
        "Filter by the students attributes and relations."
        where: StudentsQuery @searchBy
        order: StudentsQuery @sortBy
    ): [Student!]! @paginate @canModel(ability: "viewAny")
}

extend type Query {
    student: StudentQueries! @namespaced
}
