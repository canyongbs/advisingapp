type Alert @model(class: "AdvisingApp\\Alert\\Models\\Alert") {
    "Unique primary key."
    id: UUID!

    "The Concern of the alert."
    concern: Educatable! @morphTo

    "The description of the alert."
    description: String!

    "The severity of the alert."
    severity: AlertSeverity!

    "The status of the alert."
    status: AlertStatus! @belongsTo

    "The suggested intervention for the alert."
    suggested_intervention: String!

    "The created datetime of the alert."
    created_at: DateTime

    "The updated datetime of the alert."
    updated_at: DateTime

    "The deleted datetime of the alert."
    deleted_at: DateTime
}

input AlertConcernsQuery {
    student: StudentsQuery
    prospect: ProspectsQuery
}

input AlertsQuery {
    id: UUID
    concern: AlertConcernsQuery @morphToRelation
    concern_id: EducatableId
    concern_type: EducatableType
    description: String
    severity: AlertSeverity
    status: AlertStatusesQuery
    suggested_intervention: String
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
}

type AlertQueries {
    "Find a single alert by an identifying attribute."
    find(
        "The value of the attribute to match."
        id: UUID! @whereKey @rules(apply: ["required", "uuid", "exists:alerts"])
    ): Alert @find @softDeletes @canResolved(ability: "view")

    "List multiple alerts."
    list(where: AlertsQuery @searchBy): [Alert!]!
        @paginate
        @softDeletes
        @canModel(ability: "viewAny")
}

extend type Query {
    alert: AlertQueries! @namespaced
}

input CreateAlertInput {
    "The Concern related to the alert."
    concern_id: EducatableId!
        @rules(
            apply: [
                "required"
                "AdvisingApp\\Alert\\Rules\\ConcernIdExistsRule"
            ]
        )

    "The type of Concern related to the alert."
    concern_type: EducatableType!
        @rules(apply: ["required", "in:student,prospect"])

    "The description of the alert."
    description: String! @rules(apply: ["required", "string"])

    "The severity of the alert."
    severity: AlertSeverity! @rules(apply: ["required"])

    "The status of the alert."
    status_id: UUID! @rules(apply: ["required", "string", "in:alert_statuses"])

    "The suggested intervention for the alert."
    suggested_intervention: String! @rules(apply: ["required", "string"])
}

input UpdateAlertInput {
    "The description of the alert."
    description: String @rules(apply: ["filled", "string"])

    "The severity of the alert."
    severity: AlertSeverity @rules(apply: ["filled"])

    "The status of the alert."
    status_id: UUID @rules(apply: ["filled", "string", "in:alert_statuses"])

    "The suggested intervention for the alert."
    suggested_intervention: String @rules(apply: ["filled", "string"])
}

type AlertMutations {
    "Create an alert."
    create(input: CreateAlertInput! @spread): Alert!
        @create
        @canModel(ability: "create")

    "Update an alert."
    update(
        "The identifier of the alert you would like to update."
        id: UUID! @whereKey @rules(apply: ["required", "uuid", "exists:alerts"])

        "The fields you would like to update."
        input: UpdateAlertInput! @spread
    ): Alert! @update @canFind(ability: "update", find: "id")

    "Delete an alert."
    delete(
        "The identifier of the alert you would like to delete."
        id: UUID! @whereKey @rules(apply: ["required", "uuid", "exists:alerts"])
    ): Alert @delete @canFind(ability: "delete", find: "id")
}

extend type Mutation {
    alert: AlertMutations! @namespaced
}
